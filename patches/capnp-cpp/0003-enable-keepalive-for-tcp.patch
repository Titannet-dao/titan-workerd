From 672a6925c136af74a498ebc00a6455aa675de37c Mon Sep 17 00:00:00 2001
From: lghchinaidea <lghchinaidea@gmail.com>
Date: Tue, 4 Jun 2024 19:44:13 +0800
Subject: [PATCH] set keepalive for all sockets

---
 c++/src/kj/async-io-unix.c++  | 26 ++++++++++++++++++++++++++
 c++/src/kj/async-io-win32.c++ | 18 ++++++++++++++++++
 2 files changed, 44 insertions(+)

diff --git a/c++/src/kj/async-io-unix.c++ b/c++/src/kj/async-io-unix.c++
index cbc378bf..a7baaa25 100644
--- a/c++/src/kj/async-io-unix.c++
+++ b/c++/src/kj/async-io-unix.c++
@@ -884,7 +884,29 @@ private:
 constexpr size_t AsyncStreamFd::MAX_SPLICE_LEN;
 #endif  // __linux__ && !__ANDROID__

+// MACOS: use TCP_CONNECTIONTIMEOUT instead of TCP_USER_TIMEOUT
+#if __APPLE__ || __FreeBSD__
+#define TCP_USER_TIMEOUT TCP_CONNECTIONTIMEOUT
+#define TCP_KEEPIDLE TCP_KEEPALIVE
+#endif
+
 // =======================================================================================
+static void setTimeoutForSocket(int fd) {
+  int one = 1;
+  int keepcnt = 3;
+  int keepidle = 5;
+  int keepintvl = 3;
+  KJ_SYSCALL(setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, &one , sizeof(one)));
+  KJ_SYSCALL(setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, &keepidle, sizeof(keepidle)));
+  KJ_SYSCALL(setsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, &keepcnt, sizeof(keepcnt)));
+  KJ_SYSCALL(setsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, &keepintvl, sizeof(keepintvl)));
+
+  // https://blog.cloudflare.com/when-tcp-sockets-refuse-to-die
+  int tcp_timeout = (keepidle + keepcnt * keepintvl)*1000;
+  KJ_SYSCALL(setsockopt(fd, IPPROTO_TCP , TCP_USER_TIMEOUT, &tcp_timeout, sizeof(tcp_timeout)));
+
+  KJ_LOG(INFO, "set timeout and keepalive for socket", fd);
+}

 class SocketAddress {
 public:
@@ -927,6 +949,7 @@ public:
       int one = 1;
       KJ_SYSCALL(setsockopt(
           result, IPPROTO_TCP, TCP_NODELAY, (char*)&one, sizeof(one)));
+	  setTimeoutForSocket(result);
     }

     return result;
@@ -1365,6 +1388,9 @@ public:
             KJ_FAIL_SYSCALL("setsocketopt(IPPROTO_TCP, TCP_NODELAY)", error);
         }

+		// TODO: only work for TCP socket
+		setTimeoutForSocket(ownFd.get());
+
         AuthenticatedStream result;
         result.stream = heap<AsyncStreamFd>(eventPort, ownFd.release(), NEW_FD_FLAGS,
                                             UnixEventPort::FdObserver::OBSERVE_READ_WRITE);
diff --git a/c++/src/kj/async-io-win32.c++ b/c++/src/kj/async-io-win32.c++
index 9e337655..66c7afdf 100644
--- a/c++/src/kj/async-io-win32.c++
+++ b/c++/src/kj/async-io-win32.c++
@@ -453,6 +453,23 @@ private:
 };

 // =======================================================================================
+static void setTimeoutForSocket(SOCKET fd) {
+  BOOL one = 1;
+  DWORD keepcnt = 3;
+  DWORD keepidle = 5;
+  DWORD keepintvl = 3;
+  KJ_WINSOCK(setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, (char*)&one , sizeof(one)));
+  KJ_WINSOCK(setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, (char*)&keepidle, sizeof(keepidle)));
+  KJ_WINSOCK(setsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, (char*)&keepcnt, sizeof(keepcnt)));
+  KJ_WINSOCK(setsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, (char*)&keepintvl, sizeof(keepintvl)));
+
+  // there is no TCP_USER_TIMEOUT on windows platform
+  // https://blog.cloudflare.com/when-tcp-sockets-refuse-to-die
+  //int tcp_timeout = (keepidle + keepcnt * keepintvl)*1000;
+  //KJ_WINSOCK(setsockopt(fd, IPPROTO_TCP , TCP_USER_TIMEOUT, &tcp_timeout, sizeof(tcp_timeout)));
+
+  KJ_LOG(INFO, "set timeout and keepalive for socket", fd);
+}

 class SocketAddress {
 public:
@@ -494,6 +511,7 @@ public:
       //   specifies whether to pass MSG_MORE.
       BOOL one = TRUE;
       KJ_WINSOCK(setsockopt(result, IPPROTO_TCP, TCP_NODELAY, (char*)&one, sizeof(one)));
+	  setTimeoutForSocket(result);
     }

     return result;
--
2.36.0.windows.1

